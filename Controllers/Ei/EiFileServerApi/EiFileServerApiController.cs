/*
 * File Service API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using PackageRequest;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using System.IO;
using System.Linq;
using System;
using System.Threading.Tasks;

namespace Rkk2._0.Controllers.Ei
{

    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    [Route("[controller]")]
    public class EiFileServerApiController : Controller
    {
        private readonly AppOptions _options;
        private readonly ILogger<EiFileServerApiController> _logger;
        private readonly EventId _event = new EventId(new Random().Next(), nameof(EiFileServerApiController));

        public EiFileServerApiController(ILogger<EiFileServerApiController> logger, IOptions<AppOptions> options)
        {
            _options = options.Value;
            _logger = logger;
        }

        /// <summary>
        /// Upload an inbox file from counterparty
        /// </summary>
        /// <param name="kind">File type</param>
        /// <param name="fileName"></param>
        /// <param name="fileSize"></param>
        /// <param name="fileData"></param>
        /// <response code="200">File uploaded</response>
        /// <response code="400">Client error - code: 100001   description: Некорректный kind в имени файла - code: 100002   description: Некорректный sin в имени файла - code: 100003   description: Файл с таким именем уже был загружен - code: 100004   description: Некорректный формат имени файла - code: 100006   description: Некорректный размер файла </response>
        /// <response code="403">Forbidden - code: 110001   description: File kind недоступен для текущего пользователя </response>
        /// <response code="404">Not found</response>
        /// <response code="5XX">Unexpected error</response>
        [HttpPost]
        [Route("/file/inbox/{kind}")]
        [Consumes("multipart/form-data")]
        [DisableRequestSizeLimit, RequestFormLimits(MultipartBodyLengthLimit = Int32.MaxValue, ValueLengthLimit = Int32.MaxValue), RequestSizeLimit(long.MaxValue)]
        public virtual IActionResult FileInboxKindPost([FromRoute(Name = "kind")][Required] string kind, [FromForm(Name = "fileName")] string fileName, [FromForm(Name = "fileSize")] int? fileSize, IFormFile fileData)
        {
            var id = long.Parse(_event.Id.ToString());
            var takenFile = Path.Combine(_options.EiTakenResponcePath, fileName.Replace(fileName[..fileName.IndexOf("_")], "RESP") + "_" + id);

            if (!System.IO.File.Exists(Path.Combine(takenFile)) && !_options.OfflineMode)
            {
                var responseFile = Directory.GetFiles(_options.EiResponcePath).FirstOrDefault();
                System.IO.File.Copy(responseFile, takenFile);

                _logger.LogInformation(_event, $"File {responseFile} is taken {takenFile} - response for request {fileName} is created");

                var usedFile = Path.Combine(_options.EiUsedResponcePath, Path.GetFileName(responseFile));
                System.IO.File.Move(responseFile, usedFile);

                _logger.LogInformation(_event, $"Original {responseFile} is moved to used {usedFile}");
            }
            var resp = new FileRecord()
            {
                Id = id,
                CreatedAt = DateTime.Now,
                Name = fileName,
                Size = fileSize ?? fileData.Length
            };

            return Ok(resp);
        }

        /// <summary>
        /// List uploaded files
        /// </summary>
        /// <param name="page">The number of result page (default is 1)</param>
        /// <param name="count">Page size (default is 20)</param>
        /// <param name="kind">File type</param>
        /// <response code="200">OK</response>
        /// <response code="400">Client error - code: 100005   description: Некорректное число pageSize или pageNum </response>
        /// <response code="403">Forbidden - code: 110001   description: File kind недоступен для текущего пользователя </response>
        /// <response code="404">Not found</response>
        /// <response code="5XX">Unexpected error</response>
        [HttpGet]
        [Route("/file/inbox/list")]
        public virtual IActionResult FileInboxListGet([FromQuery(Name = "page")] int? page, [FromQuery(Name = "count")] int? count, [FromQuery(Name = "kind")] string kind)
        {
            string[] firstRequested = Directory.GetFiles(_options.EiTakenResponcePath); //Берем список файлов для ответа отсюда

            _logger.LogInformation(_event, $"CRE asks for requested list");

            var resp = new FileListResult()
            {
                TotalCount = firstRequested.Length,
                Page = new FileListResultPage()
                {
                    Files = firstRequested.ToList().Skip((page ?? 0) * (count ?? 20)).Take(count ?? 20)
                        .Select(x =>
                        {
                            var id = x.Split("_").TakeLast(1).First();
                            var prefix = _options.OfflineMode ? "CHP" : "CHD";
                            var name = Path.GetFileName(x).Replace("RESP", prefix).Replace("_" + id, string.Empty);

                            return new FileRecord()
                            {
                                Id = long.Parse(id),
                                Name = name,
                                Size = long.MaxValue,
                                CreatedAt = DateTime.Now
                            };
                        }).ToList()
                }
            };

            return Ok(resp);
        }

        /// <summary>
        /// Abort a multipart file upload
        /// </summary>
        /// <param name="uploadId">Multipart upload id</param>
        /// <response code="200">Multipart file upload aborted</response>
        /// <response code="400">Client error</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not found - code: 120001   description: Запись о файле не найдена в репозитории </response>
        /// <response code="5XX">Unexpected error</response>
        [HttpPost]
        [DisableRequestSizeLimit, RequestFormLimits(MultipartBodyLengthLimit = Int32.MaxValue, ValueLengthLimit = Int32.MaxValue), RequestSizeLimit(long.MaxValue)]
        [Route("/file/inbox/multipart/abort/{uploadId}")]
        public virtual IActionResult FileInboxMultipartAbortUploadIdPost([FromRoute(Name = "uploadId")][Required] long uploadId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            return StatusCode(200);
        }

        /// <summary>
        /// Finish a multipart file upload
        /// </summary>
        /// <param name="uploadId">Multipart upload id</param>
        /// <response code="200">Multipart file upload finished</response>
        /// <response code="400">Client error</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not found - code: 120001   description: Запись о файле не найдена в репозитории </response>
        /// <response code="5XX">Unexpected error</response>
        [HttpPost]
        [Route("/file/inbox/multipart/finish/{uploadId}")]
        [DisableRequestSizeLimit, RequestFormLimits(MultipartBodyLengthLimit = Int32.MaxValue, ValueLengthLimit = Int32.MaxValue), RequestSizeLimit(long.MaxValue)]
        public virtual IActionResult FileInboxMultipartFinishUploadIdPost([FromRoute(Name = "uploadId")][Required] long uploadId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            return StatusCode(200, default(FileRecord));
        }

        /// <summary>
        /// Upload a file part
        /// </summary>
        /// <param name="uploadId">Multipart upload id</param>
        /// <param name="partNumber">Part number</param>
        /// <param name="filePart"></param>
        /// <response code="200">File part uploaded</response>
        /// <response code="400">Client error</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not found - code: 120001   description: Запись о файле не найдена в репозитории </response>
        /// <response code="5XX">Unexpected error</response>
        [HttpPost]
        [Route("/file/inbox/multipart/part/{uploadId}/{partNumber}")]
        [Consumes("multipart/form-data")]
        [DisableRequestSizeLimit, RequestFormLimits(MultipartBodyLengthLimit = Int32.MaxValue, ValueLengthLimit = Int32.MaxValue), RequestSizeLimit(long.MaxValue)]
        public virtual IActionResult FileInboxMultipartPartUploadIdPartNumberPost([FromRoute(Name = "uploadId")][Required] long uploadId, [FromRoute(Name = "partNumber")][Required] int partNumber, IFormFile filePart)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            return StatusCode(200);
        }

        /// <summary>
        /// Start multipart file upload
        /// </summary>
        /// <param name="kind">File type</param>
        /// <param name="fileInboxMultipartStartKindPostRequest"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Client error - code: 100001   description: Некорректный kind в имени файла - code: 100002   description: Некорректный sin в имени файла - code: 100003   description: Файл с таким именем уже был загружен - code: 100004   description: Некорректный формат имени файла - code: 100006   description: Некорректный размер файла </response>
        /// <response code="403">Forbidden - code: 110001   description: File kind недоступен для текущего пользователя </response>
        /// <response code="404">Not found</response>
        /// <response code="5XX">Unexpected error</response>
        [HttpPost]
        [Route("/file/inbox/multipart/start/{kind}")]
        [Consumes("application/json")]
        [DisableRequestSizeLimit, RequestFormLimits(MultipartBodyLengthLimit = Int32.MaxValue, ValueLengthLimit = Int32.MaxValue), RequestSizeLimit(long.MaxValue)]
        public virtual IActionResult FileInboxMultipartStartKindPost([FromRoute(Name = "kind")][Required] string kind, [FromBody] FileInboxMultipartStartKindPostRequest fileInboxMultipartStartKindPostRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            return StatusCode(200, default(MultipartUploadStartResult));
        }

        /// <summary>
        /// Download outbox file by id
        /// </summary>
        /// <param name="kind">File type</param>
        /// <param name="id">File id</param>
        /// <response code="200">OK</response>
        /// <response code="403">Forbidden - code: 110001   description: File kind недоступен для текущего пользователя </response>
        /// <response code="404">Not found - code: 120001   description: Запись о файле не найдена в репозитории </response>
        /// <response code="5XX">Unexpected error</response>
        [HttpGet]
        [Route("/file/outbox/by-id/{kind}/{id}")]
        public virtual async Task<IActionResult> FileOutboxByIdKindIdGet([FromRoute(Name = "kind")][Required] string kind, [FromRoute(Name = "id")][Required] long id)
        {
            return await FileOutboxByNameNameGetAsync(id.ToString());
        }

        /// <summary>
        /// Download outbox file by file name
        /// </summary>
        /// <param name="name">File name</param>
        /// <response code="200">OK</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not found - code: 120001   description: Запись о файле не найдена в репозитории </response>
        /// <response code="5XX">Unexpected error</response>
        [HttpGet]
        [Route("/file/outbox/by-name/{name}")]
        public virtual async Task<IActionResult> FileOutboxByNameNameGetAsync([FromRoute(Name = "name")][Required] string name)
        {
            var files = Directory.GetFiles(_options.EiTakenResponcePath);
            var takenFile = files.FirstOrDefault(x => x.Contains(name));
            _logger.LogDebug(_event, $"searching for {takenFile} in response folder");

            if (!System.IO.File.Exists(takenFile))
            {
                _logger.LogError(_event, $"{takenFile} not found");
                throw new FileNotFoundException($"Requested file {takenFile} not found");
            }

            for (int retry = 0; retry <= _options.EiRetryCount;)
            {
                try
                {
                    Stream fstream = new HugeMemoryStream(_options.MaxFileBuffer);

                    using (var stream = new FileStream(takenFile, FileMode.Open, FileAccess.Read))
                    {
                        stream.Position = 0;
                        await stream.CopyToAsync(fstream);
                    }

                    _logger.LogInformation(_event, $"File {takenFile} reading success");
                    System.IO.File.Delete(takenFile);
                    return File(fstream, "application/xml");

                }
                catch (Exception ex)
                {
                    _logger.LogWarning(_event, ex, $"File {name} fail - iteration {retry}");
                    retry++;
                }
            }
            throw new FileNotFoundException();
        }

        /// <summary>
        /// List outbox files
        /// </summary>
        /// <param name="page">The number of result page (default is 1)</param>
        /// <param name="count">Page size (default is 20)</param>
        /// <param name="kind">File type</param>
        /// <response code="200">OK</response>
        /// <response code="400">Client error - code: 100005   description: Некорректное число pageSize или pageNum </response>
        /// <response code="403">Forbidden - code: 110001   description: File kind недоступен для текущего пользователя </response>
        /// <response code="404">Not found</response>
        /// <response code="5XX">Unexpected error</response>
        [HttpGet]
        [Route("/file/outbox/list")]
        public virtual IActionResult FileOutboxListGet([FromQuery(Name = "page")] int? page, [FromQuery(Name = "count")] int? count, [FromQuery(Name = "kind")] string kind)
        {
            string[] firstRequested = Directory.GetFiles(_options.EiTakenResponcePath); //Берем список файлов для ответа отсюда

            _logger.LogInformation(_event, $"CRE asks for requested list");

            var resp = new FileListResult()
            {
                TotalCount = firstRequested.Length,
                Page = new FileListResultPage()
                {
                    Files = firstRequested.ToList().Skip((page ?? 0) * (count ?? 20)).Take(count ?? 20)
                        .Select(x =>
                        {
                            var id = x.Split("_").TakeLast(1).First();
                            var name = Path.GetFileName(x).Replace("_" + id, string.Empty);

                            return new FileRecord()
                            {
                                Id = long.Parse(id),
                                Name = name,
                                Size = long.MaxValue,
                                CreatedAt = DateTime.Now
                            };
                        }).ToList()
                }
            };

            return Ok(resp);
        }

        /// <summary>
        /// Mark outbox file as downloaded by client
        /// </summary>
        /// <param name="fileInboxMultipartStartKindPostRequest"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Client error</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not found</response>
        /// <response code="5XX">Unexpected error</response>
        [HttpPost]
        [Route("/file/outbox/mark-downloaded")]
        [Consumes("application/json")]
        [DisableRequestSizeLimit, RequestFormLimits(MultipartBodyLengthLimit = Int32.MaxValue, ValueLengthLimit = Int32.MaxValue), RequestSizeLimit(long.MaxValue)]
        public virtual IActionResult FileOutboxMarkDownloadedPost([FromBody] FileInboxMultipartStartKindPostRequest fileInboxMultipartStartKindPostRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            return StatusCode(200, default(FileRecord));
        }
    }
}
